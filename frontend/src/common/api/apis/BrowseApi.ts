/* tslint:disable */
/* eslint-disable */
/**
 * Torrents Stream Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type {
    ApiErrorModel,
    GetProviders200Response,
    MagnetModel,
    SearchResultsModel,
} from '../models'
import {
    ApiErrorModelFromJSON,
    ApiErrorModelToJSON,
    GetProviders200ResponseFromJSON,
    GetProviders200ResponseToJSON,
    MagnetModelFromJSON,
    MagnetModelToJSON,
    SearchResultsModelFromJSON,
    SearchResultsModelToJSON,
} from '../models'

export interface GetMagnetRequest {
    provider: string
    torrentId: string
}

export interface SearchTorrentsRequest {
    query: string
    providers?: Array<string>
    category?: string
}

/**
 *
 */
export class BrowseApi extends runtime.BaseAPI {
    /**
     */
    async getMagnetRaw(
        requestParameters: GetMagnetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<MagnetModel>> {
        if (
            requestParameters.provider === null ||
            requestParameters.provider === undefined
        ) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter requestParameters.provider was null or undefined when calling getMagnet.'
            )
        }

        if (
            requestParameters.torrentId === null ||
            requestParameters.torrentId === undefined
        ) {
            throw new runtime.RequiredError(
                'torrentId',
                'Required parameter requestParameters.torrentId was null or undefined when calling getMagnet.'
            )
        }

        const queryParameters: any = {}

        const headerParameters: runtime.HTTPHeaders = {}

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = await token('apiKey', [])

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const response = await this.request(
            {
                path: `/api/browse/providers/{provider}/magnet/{torrentId}`
                    .replace(
                        `{${'provider'}}`,
                        encodeURIComponent(String(requestParameters.provider))
                    )
                    .replace(
                        `{${'torrentId'}}`,
                        encodeURIComponent(String(requestParameters.torrentId))
                    ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        )

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            MagnetModelFromJSON(jsonValue)
        )
    }

    /**
     */
    async getMagnet(
        requestParameters: GetMagnetRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<MagnetModel> {
        const response = await this.getMagnetRaw(
            requestParameters,
            initOverrides
        )
        return await response.value()
    }

    /**
     */
    async getProvidersRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<GetProviders200Response>> {
        const queryParameters: any = {}

        const headerParameters: runtime.HTTPHeaders = {}

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = await token('apiKey', [])

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const response = await this.request(
            {
                path: `/api/browse/providers`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        )

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            GetProviders200ResponseFromJSON(jsonValue)
        )
    }

    /**
     */
    async getProviders(
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<GetProviders200Response> {
        const response = await this.getProvidersRaw(initOverrides)
        return await response.value()
    }

    /**
     */
    async searchTorrentsRaw(
        requestParameters: SearchTorrentsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<SearchResultsModel>> {
        if (
            requestParameters.query === null ||
            requestParameters.query === undefined
        ) {
            throw new runtime.RequiredError(
                'query',
                'Required parameter requestParameters.query was null or undefined when calling searchTorrents.'
            )
        }

        const queryParameters: any = {}

        if (requestParameters.query !== undefined) {
            queryParameters['query'] = requestParameters.query
        }

        if (requestParameters.providers) {
            queryParameters['providers'] = requestParameters.providers
        }

        if (requestParameters.category !== undefined) {
            queryParameters['category'] = requestParameters.category
        }

        const headerParameters: runtime.HTTPHeaders = {}

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = await token('apiKey', [])

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const response = await this.request(
            {
                path: `/api/browse/search`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        )

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            SearchResultsModelFromJSON(jsonValue)
        )
    }

    /**
     */
    async searchTorrents(
        requestParameters: SearchTorrentsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<SearchResultsModel> {
        const response = await this.searchTorrentsRaw(
            requestParameters,
            initOverrides
        )
        return await response.value()
    }
}
