/* tslint:disable */
/* eslint-disable */
/**
 * Torrents Stream Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import type { ApiErrorModel, TorrentModel } from '../models'
import {
    ApiErrorModelFromJSON,
    ApiErrorModelToJSON,
    TorrentModelFromJSON,
    TorrentModelToJSON,
} from '../models'

export interface CreateTorrentRequest {
    torrent: string
}

export interface DeleteTorrentRequest {
    infoHash: string
}

export interface GetTorrentRequest {
    infoHash: string
}

/**
 *
 */
export class TorrentsApi extends runtime.BaseAPI {
    /**
     */
    async createTorrentRaw(
        requestParameters: CreateTorrentRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<TorrentModel>> {
        if (
            requestParameters.torrent === null ||
            requestParameters.torrent === undefined
        ) {
            throw new runtime.RequiredError(
                'torrent',
                'Required parameter requestParameters.torrent was null or undefined when calling createTorrent.'
            )
        }

        const queryParameters: any = {}

        if (requestParameters.torrent !== undefined) {
            queryParameters['torrent'] = requestParameters.torrent
        }

        const headerParameters: runtime.HTTPHeaders = {}

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = await token('apiKey', [])

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const response = await this.request(
            {
                path: `/api/torrents`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        )

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            TorrentModelFromJSON(jsonValue)
        )
    }

    /**
     */
    async createTorrent(
        requestParameters: CreateTorrentRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<TorrentModel> {
        const response = await this.createTorrentRaw(
            requestParameters,
            initOverrides
        )
        return await response.value()
    }

    /**
     */
    async deleteTorrentRaw(
        requestParameters: DeleteTorrentRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<void>> {
        if (
            requestParameters.infoHash === null ||
            requestParameters.infoHash === undefined
        ) {
            throw new runtime.RequiredError(
                'infoHash',
                'Required parameter requestParameters.infoHash was null or undefined when calling deleteTorrent.'
            )
        }

        const queryParameters: any = {}

        const headerParameters: runtime.HTTPHeaders = {}

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = await token('apiKey', [])

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const response = await this.request(
            {
                path: `/api/torrents/{infoHash}`.replace(
                    `{${'infoHash'}}`,
                    encodeURIComponent(String(requestParameters.infoHash))
                ),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        )

        return new runtime.VoidApiResponse(response)
    }

    /**
     */
    async deleteTorrent(
        requestParameters: DeleteTorrentRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<void> {
        await this.deleteTorrentRaw(requestParameters, initOverrides)
    }

    /**
     */
    async getTorrentRaw(
        requestParameters: GetTorrentRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<TorrentModel>> {
        if (
            requestParameters.infoHash === null ||
            requestParameters.infoHash === undefined
        ) {
            throw new runtime.RequiredError(
                'infoHash',
                'Required parameter requestParameters.infoHash was null or undefined when calling getTorrent.'
            )
        }

        const queryParameters: any = {}

        const headerParameters: runtime.HTTPHeaders = {}

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = await token('apiKey', [])

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const response = await this.request(
            {
                path: `/api/torrents/{infoHash}`.replace(
                    `{${'infoHash'}}`,
                    encodeURIComponent(String(requestParameters.infoHash))
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        )

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            TorrentModelFromJSON(jsonValue)
        )
    }

    /**
     */
    async getTorrent(
        requestParameters: GetTorrentRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<TorrentModel> {
        const response = await this.getTorrentRaw(
            requestParameters,
            initOverrides
        )
        return await response.value()
    }

    /**
     */
    async getTorrentsRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<runtime.ApiResponse<Array<TorrentModel>>> {
        const queryParameters: any = {}

        const headerParameters: runtime.HTTPHeaders = {}

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken
            const tokenString = await token('apiKey', [])

            if (tokenString) {
                headerParameters['Authorization'] = `Bearer ${tokenString}`
            }
        }
        const response = await this.request(
            {
                path: `/api/torrents`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides
        )

        return new runtime.JSONApiResponse(response, (jsonValue) =>
            jsonValue.map(TorrentModelFromJSON)
        )
    }

    /**
     */
    async getTorrents(
        initOverrides?: RequestInit | runtime.InitOverrideFunction
    ): Promise<Array<TorrentModel>> {
        const response = await this.getTorrentsRaw(initOverrides)
        return await response.value()
    }
}
